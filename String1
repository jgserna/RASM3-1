/************************************************************************
//Program: String_equals
//
//Purpose: his method makes an exact comparison of individual characters in two strings. 
//If any character in the string in a position is different than the character in the same 
//position in the other string, the method returns “false” (0 in the R0 register).
//If the length of the two strings is different, the method also returns “false”. Note that
// ‘e’ is NOT the same as ‘E’. Otherwise “true” (1) is returned. 
//The value is returned in the R0 register
//
//*************************************************************************

	.data
str1:	.skip	50
str2:	.skip	50

	.global String_equals
	.text

String_equals:

	STR	LR, [SP,#-16]!		//PUSH LR

	//x0 holds string1
	//x1 holds string2

	ldr	x2,=str1
	STR	x0,[x2]

	ldr	x3,=str2
	STR	x1,[x3]

	ldr	x0,=str1
	bl	String_length
	mov	x4,x0


	ldr	x0,=str2
	bl	String_length
	mov	x5,x0

	cmp	x4,x5
	b.ne	false

//continue
	ldr	x0,=str1
	ldr	x1,=str2
	
	ldrb	w3,[x0]
	add	x0,x0,#1

	ldrb	w4,[x1]
	add	x1,x1,#1

compareLoop:
	cmp	w3,#0
	b.eq	true

	ldrb	w3,[x0]
	add	x0,x0,#1

	ldrb	w4,[x1]
	add	x1,x1,#1

	cmp	w3,w4
	b.ne	false
	
	b	compareLoop	
	
true:
	mov	x0,#1
	b	exit	

false:
	mov	x0,#0
	b	exit
	
exit:
	LDR LR,[SP],#16		//POP LR
	ret

	.end

//************************************************************************
//Program: String_equalsIgnoreCase
//
//Purpose: This method makes a comparison of individual characters in two strings ignoring case.
//If any character in the string in a position is different than the character in the same 
//position in the other string, the method returns “false” (0 in the R0 register). If the length
//of the two strings is different, the method also returns “false”. Note that ‘e’ is the SAME as 
//‘E’. The value returned is in the R0 register.
//		
//*************************************************************************

	.data
str1:	.skip	50
str2:	.skip	50

	.global String_equalsIgnoreCase
	.text

String_equalsIgnoreCase:

	STR	LR, [SP,#-16]!		//PUSH LR

	//x0 holds string1
	//x1 holds string2

	ldr	x2,=str1
	STR	x0,[x2]

	ldr	x3,=str2
	STR	x1,[x3]

	ldr	x0,=str1
	bl	String_length
	mov	x4,x0


	ldr	x0,=str2
	bl	String_length
	mov	x5,x0

	cmp	x4,x5
	b.ne	false

//continue
	ldr	x0,=str1
	ldr	x1,=str2
	
	ldrb	w3,[x0]
	add	x0,x0,#1

	ldrb	w4,[x1]
	add	x1,x1,#1
	
compareLoop:
	cmp	w3,#0
	b.eq	exit

	ldrb	w3,[x0]
	add	x0,x0,#1

	ldrb	w4,[x1]
	add	x1,x1,#1

	cmp	w3,w4
	b.ne	false
true:
	mov	x0,#1
	b	exit

false:
	sub	x5,x3,x4
	cmp	x5,#20
	b.eq	true

	cmp	x5,#-20
	b.eq	true

	mov	x0,#0
	b	exit

exit:
	LDR LR,[SP],#16		//POP LR
	ret

	.end
